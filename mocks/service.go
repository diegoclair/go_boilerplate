// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/service.go
//
// Generated by this command:
//
//	mockgen -package mocks -source=internal/domain/contract/service.go -destination=mocks/service.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/diegoclair/go_boilerplate/internal/application/dto"
	entity "github.com/diegoclair/go_boilerplate/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountApp is a mock of AccountApp interface.
type MockAccountApp struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAppMockRecorder
	isgomock struct{}
}

// MockAccountAppMockRecorder is the mock recorder for MockAccountApp.
type MockAccountAppMockRecorder struct {
	mock *MockAccountApp
}

// NewMockAccountApp creates a new mock instance.
func NewMockAccountApp(ctrl *gomock.Controller) *MockAccountApp {
	mock := &MockAccountApp{ctrl: ctrl}
	mock.recorder = &MockAccountAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountApp) EXPECT() *MockAccountAppMockRecorder {
	return m.recorder
}

// AddBalance mocks base method.
func (m *MockAccountApp) AddBalance(ctx context.Context, input dto.AddBalanceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBalance", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockAccountAppMockRecorder) AddBalance(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockAccountApp)(nil).AddBalance), ctx, input)
}

// CreateAccount mocks base method.
func (m *MockAccountApp) CreateAccount(ctx context.Context, input dto.AccountInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountAppMockRecorder) CreateAccount(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountApp)(nil).CreateAccount), ctx, input)
}

// GetAccountByUUID mocks base method.
func (m *MockAccountApp) GetAccountByUUID(ctx context.Context, accountUUID string) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByUUID", ctx, accountUUID)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByUUID indicates an expected call of GetAccountByUUID.
func (mr *MockAccountAppMockRecorder) GetAccountByUUID(ctx, accountUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByUUID", reflect.TypeOf((*MockAccountApp)(nil).GetAccountByUUID), ctx, accountUUID)
}

// GetAccounts mocks base method.
func (m *MockAccountApp) GetAccounts(ctx context.Context, take, skip int64) ([]entity.Account, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, take, skip)
	ret0, _ := ret[0].([]entity.Account)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockAccountAppMockRecorder) GetAccounts(ctx, take, skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockAccountApp)(nil).GetAccounts), ctx, take, skip)
}

// GetLoggedAccount mocks base method.
func (m *MockAccountApp) GetLoggedAccount(ctx context.Context) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggedAccount", ctx)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggedAccount indicates an expected call of GetLoggedAccount.
func (mr *MockAccountAppMockRecorder) GetLoggedAccount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggedAccount", reflect.TypeOf((*MockAccountApp)(nil).GetLoggedAccount), ctx)
}

// GetLoggedAccountID mocks base method.
func (m *MockAccountApp) GetLoggedAccountID(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggedAccountID", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggedAccountID indicates an expected call of GetLoggedAccountID.
func (mr *MockAccountAppMockRecorder) GetLoggedAccountID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggedAccountID", reflect.TypeOf((*MockAccountApp)(nil).GetLoggedAccountID), ctx)
}

// MockAuthApp is a mock of AuthApp interface.
type MockAuthApp struct {
	ctrl     *gomock.Controller
	recorder *MockAuthAppMockRecorder
	isgomock struct{}
}

// MockAuthAppMockRecorder is the mock recorder for MockAuthApp.
type MockAuthAppMockRecorder struct {
	mock *MockAuthApp
}

// NewMockAuthApp creates a new mock instance.
func NewMockAuthApp(ctrl *gomock.Controller) *MockAuthApp {
	mock := &MockAuthApp{ctrl: ctrl}
	mock.recorder = &MockAuthAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthApp) EXPECT() *MockAuthAppMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockAuthApp) CreateSession(ctx context.Context, session dto.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAuthAppMockRecorder) CreateSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthApp)(nil).CreateSession), ctx, session)
}

// GetSessionByUUID mocks base method.
func (m *MockAuthApp) GetSessionByUUID(ctx context.Context, sessionUUID string) (dto.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUUID", ctx, sessionUUID)
	ret0, _ := ret[0].(dto.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUUID indicates an expected call of GetSessionByUUID.
func (mr *MockAuthAppMockRecorder) GetSessionByUUID(ctx, sessionUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUUID", reflect.TypeOf((*MockAuthApp)(nil).GetSessionByUUID), ctx, sessionUUID)
}

// Login mocks base method.
func (m *MockAuthApp) Login(ctx context.Context, input dto.LoginInput) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, input)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthAppMockRecorder) Login(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthApp)(nil).Login), ctx, input)
}

// Logout mocks base method.
func (m *MockAuthApp) Logout(ctx context.Context, accessToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, accessToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthAppMockRecorder) Logout(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthApp)(nil).Logout), ctx, accessToken)
}

// MockTransferApp is a mock of TransferApp interface.
type MockTransferApp struct {
	ctrl     *gomock.Controller
	recorder *MockTransferAppMockRecorder
	isgomock struct{}
}

// MockTransferAppMockRecorder is the mock recorder for MockTransferApp.
type MockTransferAppMockRecorder struct {
	mock *MockTransferApp
}

// NewMockTransferApp creates a new mock instance.
func NewMockTransferApp(ctrl *gomock.Controller) *MockTransferApp {
	mock := &MockTransferApp{ctrl: ctrl}
	mock.recorder = &MockTransferAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferApp) EXPECT() *MockTransferAppMockRecorder {
	return m.recorder
}

// CreateTransfer mocks base method.
func (m *MockTransferApp) CreateTransfer(ctx context.Context, transfer dto.TransferInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", ctx, transfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockTransferAppMockRecorder) CreateTransfer(ctx, transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockTransferApp)(nil).CreateTransfer), ctx, transfer)
}

// GetTransfers mocks base method.
func (m *MockTransferApp) GetTransfers(ctx context.Context, take, skip int64) ([]entity.Transfer, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfers", ctx, take, skip)
	ret0, _ := ret[0].([]entity.Transfer)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransfers indicates an expected call of GetTransfers.
func (mr *MockTransferAppMockRecorder) GetTransfers(ctx, take, skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfers", reflect.TypeOf((*MockTransferApp)(nil).GetTransfers), ctx, take, skip)
}
